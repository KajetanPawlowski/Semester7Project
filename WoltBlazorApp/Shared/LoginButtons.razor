@using HttpClients.Interfaces
@inject NavigationManager navMgr
@inject IAuthHttpClient authService


<AuthorizeView Policy="isOnlyWoltUser">
    <div class="position-fixed top-0 end-0">
        <span class="welcome-span mb-2" @onclick="Logout"> Log out</span>
        <img src="img/WoltUser.png" class="img-fluid profile icon" alt="Sad Yuho Page Not Found">
    </div>
</AuthorizeView>
<AuthorizeView Policy="isWoltSpecialist">
    <div class="position-fixed top-0 end-0">
        <span class="welcome-span mb-2" @onclick="Logout"> Log out</span>
        <img src="img/WoltSpecialist.png" class="img-fluid profile icon"  alt="Wolt Specialist">
    </div>
</AuthorizeView>
<AuthorizeView Policy="isWoltSupplier">
    <div class="position-fixed top-0 end-0">
        <span class="welcome-span mb-2" @onclick="Logout"> Log out</span>
        <img src="img/WoltSupplier.png" class="img-fluid profile icon" alt="Wolt Supplier">
    </div>
</AuthorizeView>

<AuthorizeView>
    <NotAuthorized>
        <div class="position-fixed top-0 end-0 p-3">
            <span class="welcome-span mb-2" @onclick="Login">Log in / Sign up :)</span>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    private void Login()
    {
        navMgr.NavigateTo("/");
    }

    private async Task Logout()
    {
        await authService.LogoutAsync(await LoadUsername());
        navMgr.NavigateTo("/");
    }
    private async Task<string> LoadUsername()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity == null)
        {
            navMgr.NavigateTo("/");
        }
        else if (user.Identity.IsAuthenticated)
        {
            return user.Identity.Name;
        }
        return null;
    }

}