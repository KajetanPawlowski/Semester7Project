@page "/CreateSurvey/{SupplierId}"

@using Domain.DTO
@using Domain.Model
@using HttpClients.Interfaces
@inject ISurveyHttpClient _surveyHttpClient
@inject ISupplierHttpClient _supplierHttpClient
@inject NavigationManager navMgr
@attribute [Authorize(Policy = "isWoltSpecialist")]


<div class="card-container">
    @if (supplier != null)
    {
        <h2>Create Survey for @supplier.CompanyName</h2>
    }
    @if (supplier == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            <div class="col-md-3">
                <CreateSurveySidebar Categories="supplier.Categories" Risks="supplier.RelevantRisks" Questions="newSurvey.Questions" AddQuestionNotify="AddQuestion" SelectQuestionNotify="SelectQuestion"/>
            </div>
            <div class="col-md-9">
                @if (addingNew)
                {
                    <CreateQuestionCard Risk="selectedRisk" CreateQuestionCallback="CreateQuestion"/>
                    @foreach (var question in questions)
                    {
                        <AddQuestionCard _question="question" CreateQuestionCallback="CreateQuestion"/>;
                    }
                }
                else
                {
                    @foreach (var item in newSurvey.Questions)
                    {
                        <QuestionCard question="@item"/>
                    }
                   
                }
                <div class="card-footer ">
                    <button class="btn" @onclick="SaveSurvey">
                        Save Survey
                    </button>
                </div>
            </div>
           
        </div> 
    }
</div >
@code 
{
    [Parameter]
    public string SupplierId { get; set; }

    private Supplier supplier;
    
    private CreateSurveyDTO newSurvey;
    private List<Question> questions { get; set; }

    int selectedQuestionIndex;
    Risk selectedRisk;


    private string newName = "";

    bool addingNew;

    protected override async Task OnInitializedAsync()
    {
        addingNew = true;
        await LoadSupplier();
        await LoadQuestions();
        newSurvey = new CreateSurveyDTO();
        newSurvey.Questions = new List<CreateQuestionDTO>();
        selectedRisk = supplier.RelevantRisks.First();
        StateHasChanged();

    }

    private async Task LoadSupplier()
    {
        int SupplierIdInt = int.Parse(SupplierId);
        supplier = await _supplierHttpClient.GetSupplierById(SupplierIdInt);
       
    }

    private async Task LoadQuestions()
    {
        questions = await _surveyHttpClient.GetQuestionsAsync(supplier.Id);
        Console.WriteLine(questions.Count);
        
    }
    //Invoked form sidebar - Show create question card
    private void AddQuestion(Risk risk)
    {
        addingNew = true;
        selectedRisk = risk;
        StateHasChanged();
    }
    //Invoked form Create Question Card - adds the question to the view
    private void CreateQuestion(CreateQuestionDTO newQuestion)
    {
        newQuestion.CCode = supplier.CountryCode;
        newSurvey.Questions.Add(newQuestion);
        addingNew = false;
        StateHasChanged();

    }



    private void SelectQuestion(CreateQuestionDTO question)
    {
        addingNew = false;
        selectedQuestionIndex = newSurvey.Questions.IndexOf(question);
        selectedRisk = newSurvey.Questions[selectedQuestionIndex].RelatedRisk;
        StateHasChanged();
    }

    private async Task SaveSurvey()
    {
        try
        {
            newSurvey.SupplierId = supplier.Id;
            newSurvey.CreatorId = 1;
            await _surveyHttpClient.CreateSurveyAsync(newSurvey);
            navMgr.NavigateTo($"/SupplierProfile/{SupplierId}");

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error saving survey: {e.Message}");
        }
    }
}