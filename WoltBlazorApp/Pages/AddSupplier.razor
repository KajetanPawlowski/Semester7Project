@page "/AddSupplier"
@using Domain.Model
@using Domain.DTO
@using HttpClients.Interfaces
@inject IUserHttpClient _userHttpClient
@inject IAuthHttpClient _authHttpClient
@inject ISupplierHttpClient _supplierHttpClient
@inject NavigationManager navMgr
@attribute [Authorize(Policy = "isWoltUser")]

<style>
 
    .custom-dropdown {
        width: 100%;
        max-width: 200px; 
    }

    .custom-option {
        width: 100%; 
    }
</style>


<div class="card-container">
    <h1>Add Supplier</h1>
    <div class="card">
        <div class="card-title">
            <h6>Supplier Details:</h6>
        </div>
        <div class="card-body" style="@StyleDisplay[0]">
            <input type="text" placeholder="Company Name" @bind="toCreate.SupplierName" />
            <select class="custom-dropdown" @bind="toCreate.CountryCode">
                <option>Select a country</option>
                @foreach (Country item in _countries)
                {
                    <option class="custom-option" value="@item.CCode">@item.CountryName</option>
                }
            </select>
            <input type="number" placeholder="Headcount" @bind="toCreate.HeadCount" />
        </div>
        <div class="card-footer" style="@StyleDisplay[0]">
            <button @onclick="() => ShowNext(0)" class="btn">
                Next
            </button>
        </div>
    </div>

    @if (UserExist)
    {
        <div class="card">
            <div class="card-title">
                <h6>Representative:</h6>
            </div>
            <div class="card-body" style="@StyleDisplay[1]">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Representative Name</th>
                        <th>Rep. Mail</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td>@user.FullName</td>
                            <td>@user.Mail</td>
                            <td>

                                <button class="btn" @onclick="() => SelectUser(user)">
                                    Select User
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="card-footer" style="@StyleDisplay[1]">
                <button @onclick="ShowAddUser" class="btn">
                    Add User
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-title">
                <h6>New Representative:</h6>
            </div>
            <div class="card-body" style="@StyleDisplay[1]">
                <input type="text" placeholder="Representative name" @bind="newUser.FullName"/>
                <input type="text" placeholder="Representative Mail" @bind="newUser.UserMail"/>
                <!-- Add other input fields for user details -->
            </div>
            <div class="card-footer" style="@StyleDisplay[1]">
                <button class="btn" @onclick="SaveNewUser">
                    Save User
                </button>
            </div>
        </div>
    }

    <div class="card">
        <div class="card-title">
            <h6>Supplied Products:</h6>
        </div>
        <div class="card-body" style="@StyleDisplay[2]">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="newProduct" placeholder="Add a new product"/>
                <button class="btn btn-success" @onclick="AddProduct">
                    Add
                </button>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Product</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td>@product</td>
                            <td>
                                @if (toCreate.SuppliedProducts != null && toCreate.SuppliedProducts.FirstOrDefault(p => p.Equals(product)) != null)
                                {
                                    <button class="btn" @onclick="() => AddProductToFinalList(product)">
                                        Added
                                    </button>
                                }
                                else
                                {
                                    <button class="btn" @onclick="() => AddProductToFinalList(product)" >
                                        Add to Supplier
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer" style="@StyleDisplay[2]">
            <button class="btn" @onclick="SaveSupplier">
                Save
            </button>
        </div>
    </div>
</div>

@code {
    // Shuffling effect
    private string[] StyleDisplay = new string[] { "display : block", "display : none", "display : none" };

    private List<Country> _countries = new List<Country>();

    private SupplierCreationDTO toCreate = new SupplierCreationDTO();
    private List<User> Users = new List<User>();
    private bool UserExist = true;
    private RegisterUserDTO newUser; 
    private User selectedUser = new User();

    private List<string> Products = new List<string> { "Fish", "Meat", "Vegetables" };
    private string newProduct = "";

    private void ShowNext(int current)
    {
        StyleDisplay[current] = "display : none";
        StyleDisplay[current + 1] = "display : block";
    }

    private void ShowAddUser()
    {
        UserExist = false;
        newUser = new RegisterUserDTO();
    }

    private async Task SaveNewUser()
    {
        User created = await _authHttpClient.RegisterAsync(newUser);
        toCreate.RepresentativeId= created.Id;
        ShowNext(1);
    }

    private void SelectUser(User user)
    {
        selectedUser = user;
        toCreate.RepresentativeId = user.Id;
        ShowNext(1);
    }

    private void AddProductToFinalList(string product)
    {
        toCreate.SuppliedProducts.Add(product);
    }

    private void AddProduct()
    {
        if (!string.IsNullOrEmpty(newProduct))
        {
            Products.Add(newProduct);
            AddProductToFinalList(newProduct);
            newProduct = "";
        }
    }

    private async Task SaveSupplier()
    {
        await _supplierHttpClient.CreateSupplier(toCreate);
        navMgr.NavigateTo("/SuppliersOverview");
    }

    protected override async void OnInitialized()
    {
        await LoadUsers();
        await LoadCountries();
    }

    private async Task LoadUsers()
    {
        Users = await _userHttpClient.GetUsersAsync();
        toCreate.SuppliedProducts ??= new List<string>();
    }
    
    async Task LoadCountries()
    {
        _countries = await _supplierHttpClient.GetAllCountries();
    }

}