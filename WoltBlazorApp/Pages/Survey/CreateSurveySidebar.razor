@using Domain.Model
@using Domain.DTO
<!-- Side Menu -->
<div class="sidebar">
    <ul class="list-group">
        @foreach (var category in Categories)
        {
            <li class="list-group-item">
                <h5>@category.CategoryName</h5>
                @foreach (var questionCategory in QuestionCategories.Where(r => r.RiskCategoryId== category.CategoryId))
                {
                    <h6>@questionCategory.Name</h6>
                    @foreach (var question in Questions.Where(q => q.QuestionCategory.Name.Equals(questionCategory.Name)))
                    {
                        <div @onclick="() => SelectQuestion(question)" class="list-group-item list-group-item-action">
                            - @question.Body
                        </div>
                    }
                    <div class="list-group-item list-group-item-action" @onclick="() => OpenAddQuestion(questionCategory)">
                        + Add Question
                    </div>
                }
            </li>
        }
    <div class="card-footer">
        <button class="btn" @onclick="SaveSurveyNotify">
            Save Survey
        </button>
    </div>
    </ul>
</div>

@code {
    [Parameter]
    public List<RiskCategory> Categories { get; set; }
    [Parameter]
    public List<QuestionCategory> QuestionCategories { get; set; }
    [Parameter]
    public List<CreateQuestionDTO> Questions { get; set; }
    [Parameter]
    public EventCallback<CreateQuestionDTO> SelectQuestionNotify { get; set; }
    [Parameter]
    public EventCallback<QuestionCategory> AddQuestionNotify { get; set; }
    [Parameter]
    public Action SaveSurveyNotify { get; set; }
    

    void SelectQuestion(CreateQuestionDTO currentQuestion)
    {
        SelectQuestionNotify.InvokeAsync(currentQuestion);
    }

    void OpenAddQuestion(QuestionCategory questionCategory)
    {
        AddQuestionNotify.InvokeAsync(questionCategory);
    }
}