@page "/SupplierProfile/{SupplierId}"
@using HttpClients.Interfaces
@using Domain.Model
@using Domain.DTO
@inject ISupplierHttpClient _supplierHttpClient
@inject ISurveyHttpClient _surveyHttpClient
@attribute [Authorize]

@inject NavigationManager navMgr

<PageTitle>Supplier Profile</PageTitle>
<div class="container-fluid page-container">
    <h1>Surveys</h1>
    @if (supplier == null || _surveys == null)
    {
        <p>Load supplier data...</p>
    }
    else
    {
        <table class="table supplierProfile">
            <thead>
            <tr>
                <th>Survey Name</th>
                <th>Creation Time</th>
                <th>Answered Time</th>
                <AuthorizeView Policy="isWoltSupplier">
                    <th>Answer Survey</th> 
                </AuthorizeView>
                <AuthorizeView Policy="isWoltUser">
                    <th>See Survey Answers</th>
                    <th>Re-send Survey</th>
                </AuthorizeView>
                
            </tr>
            </thead>
            <tbody>
            @foreach (var item in _surveys)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.CreationTime</td>
                    @if (item.AnsweredTime != null)
                    {
                        <td>@item.AnsweredTime</td>
                        <td><button class="feed-buttons seeSurveyBtn btn" @onclick="() => AnswerSurvey(item)">See Answers</button></td>
                        <AuthorizeView Policy="isWoltUser">
                            <td><button @onclick="() => ResendSurvey(item)">Re-send survey</button></td>
                        </AuthorizeView>                                                                                                          
                    }
                    else
                    {
                        <td>Pending...</td>
                        <AuthorizeView Policy="isWoltSupplier">
                            <td><button class="feed-buttons answerSurveyBtn btn" @onclick="() => AnswerSurvey(item)">Answer Survey</button></td>
                        </AuthorizeView>
                        <AuthorizeView Policy="isWoltUser">
                            <td>Waiting for @supplier.CompanyName to answer</td>
                            <td><button @onclick="() => ResendSurvey(item)">Re-send survey</button></td>
                        </AuthorizeView>
                    }
                </tr>
            }
            </tbody>
        </table>
    }    
</div>

@code {
    // Cascading parameter
    [Parameter]
    public string SupplierId { get; set; }
    
    private Supplier? supplier;
    private List<Domain.Model.Survey>?  _surveys;
    private string msg = "";
    

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            int SupplierIdInt = int.Parse(SupplierId);
            supplier = await _supplierHttpClient.GetSupplierById(SupplierIdInt);
            _surveys = await _supplierHttpClient.GetSurveys(SupplierIdInt);
            _surveys.Reverse();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void AnswerSurvey(Domain.Model.Survey survey)
    {
        navMgr.NavigateTo("/AnswerSurvey/"+ survey.Id);
    }

    public async Task ResendSurvey(Domain.Model.Survey survey)
    {
        try
        {
            List<CreateQuestionDTO> questionDto = survey.Questions.Select(q => new CreateQuestionDTO
            {
                Id = q.Id,
                Body = q.Body,
                AllAnswers = q.AllAnswers,
                QuestionCategory = q.QuestionCategory,
                CCode = q.CCode,
                CompanySize = q.RelevantCompanySize
            }).ToList();
            
            CreateSurveyDTO surveyDto = new CreateSurveyDTO
            {
                SupplierId = survey.SupplierId,
                CreatorId = survey.CreatorId,
                Questions = questionDto
            };
            
            Domain.Model.Survey copy = await _surveyHttpClient.CreateSurveyAsync(surveyDto);
            copy.Name = "Copy of " + survey.Name;
            copy.SupplierId = survey.SupplierId;
            
            StateHasChanged();
            await Load();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }
    
    
}