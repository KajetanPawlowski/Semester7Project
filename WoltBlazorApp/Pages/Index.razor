@page "/"
@using HttpClients.Interfaces 
@using Domain.Model
@inject IAuthHttpClient _authHttpClient
@inject ISupplierHttpClient _supplierHttpClient
@inject NavigationManager _navMgr

<AuthorizeView>
    <NotAuthorized>
        <div class="card logInPage">
            <h3>Please login</h3>
            <div class="field logInPage">
                <label>Email:</label>
                <input type="text" @bind="userName"/>
            </div>
            <div class="field logInPage">

                <label>Password:</label>
                <input type="password" @bind="password"/>
            </div>
            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <div class="field logInPage">
                    <label style="color: red">
                        @errorLabel
                    </label>
                </div>
            }
            <div class="field logInPage">
                <button class="loginbtn logInPage" @onclick="LoginAsync">Log in</button>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="card logInPage">
            <h3>Hello, @context.User.Identity.Name</h3>
            @*<img src="img/WoltUser.png"/>*@
        </div>
    </Authorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string userName;
    private string password;
    private string role;
    private string errorLabel;
    
   /*protected override async Task OnInitializedAsync()
   {
       userName = "spec";
       password = "pass";
       await LoginAsync();
   }*/
    
    private async Task LoginAsync()
    {
        errorLabel = "";
        try
        {
            await _authHttpClient.LoginAsync(userName, password);
            var authenticationState = await authenticationStateTask;
            var user = authenticationState.User;
            if (user.IsInRole("woltSpecialist") || user.IsInRole("woltUser"))
            {
                _navMgr.NavigateTo("/SuppliersOverview");
            }
            else if (user.IsInRole("woltSupplier"))
            {
                Supplier supplier = await _supplierHttpClient.GetSupplierByRepMail(user.Identity.Name);
                _navMgr.NavigateTo($"/SupplierProfile/{supplier.Id}");
            }
        }
        catch (Exception e)
        {
            if (e.Message.Equals("User not found"))
            {
                errorLabel = "Contact your organization for login details."; 
            }
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }
    
    
}