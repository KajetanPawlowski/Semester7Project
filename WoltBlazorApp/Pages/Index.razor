@page "/"
@using Domain.Model
@using HttpClients.Interfaces
@inject ISupplierHttpClient SupplierHttpClient
@inject IUserHttpClient UserHttpClient
@inject NavigationManager navMgr

<PageTitle>Home page- Wolt</PageTitle>

<h1>List of Suppliers</h1>

@if (_suppliers == null)
{
    <p>Loading suppliers' data....</p>
    <p>@msg</p>
}
else if (!_suppliers.Any())
{
    <p>No Suppliers to display<button class="feed-buttons addSupplierBtn" @onclick="AddSupplier">Add Supplier</button></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Company Name</th>
            <th>Country</th>
            <th>Representative Mail</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _suppliers)
        {
            <tr>
                <td>@item.CompanyName</td>
                <td>@item.Country</td>
                <td>@_userMails.FirstOrDefault(u => u.Id == item.RepresentativeId).Mail</td>
            </tr>
        }
        </tbody>
    </table>
    <button class="feed-buttons addSupplierBtn" @onclick="AddSupplier">Add Supplier</button>
}


@code {
    private List<Supplier>? _suppliers;
    private List<User>? _userMails;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliers();
    }

    private async Task LoadSuppliers()
    {
        try
        {
            _suppliers = await SupplierHttpClient.GetSuppliers();
            _userMails = await UserHttpClient.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine("Failed to load Suppliers");
            msg = "Failed to load data";
        }
    }

    private async Task AddSupplier()
    {
        navMgr.NavigateTo("/AddSupplier");
    }
}
